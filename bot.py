import os
import sys
import json
import logging
import asyncio
import threading
from datetime import datetime
from http.server import BaseHTTPRequestHandler, HTTPServer

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from zoneinfo import ZoneInfo
import aiohttp

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN      = os.getenv("TELEGRAM_BOT_TOKEN", "TOKEN_REMOVED")
ADMIN_CHAT_ID  = int(os.getenv("ADMIN_CHAT_ID", "7309681026"))
RESTART_MINUTES = 420

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=API_TOKEN)
dp  = Dispatcher()

def run_fake_server(port: int = 8080):
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
    threading.Thread(target=HTTPServer(('', port), Handler).serve_forever, daemon=True).start()

def schedule_restart():
    def _restart():
        os.execv(sys.executable, [sys.executable] + sys.argv)
    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–π–º–µ—Ä –±–µ–∑ daemon-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    timer = threading.Timer(RESTART_MINUTES * 60, _restart)
    # –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º daemon —É–∂–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
    timer.daemon = True
    timer.start()

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app_btn = types.KeyboardButton(
        text="üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        web_app=types.WebAppInfo(url="https://v0-index-sepia.vercel.app")
    )
    keyboard.add(web_app_btn)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Smoke Factory BBQ!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=keyboard
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞–∂–∞–ª /start")

# === Web App Data ===
@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def handle_order(message: types.Message):
    logger.info("===== –ü–û–õ–£–ß–ï–ù –ó–ê–ö–ê–ó –û–¢ WEB APP =====")
    raw = message.web_app_data.data
    logger.info(f"–°—ã—Ä–æ–π data: {raw}")

    try:
        data = json.loads(raw)
        # –ü–æ–ª—è
        pay_method = data.get('payMethod', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
        user       = message.from_user
        username   = f"@{user.username}" if user.username else user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        phone      = data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        address    = data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        delivery   = data.get('delivery', 0)
        total      = data.get('total', 0)
        items      = data.get('items', {})

        # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
        when_str = ""
        if data.get("orderWhen") == "soonest":
            raw_date = data.get("orderDate")
            dt = datetime.strptime(raw_date, "%Y-%m-%d") if raw_date else datetime.now(ZoneInfo("Asia/Bangkok"))
            when_str = f"{dt.strftime('%d.%m')}, –±–ª–∏–∂–∞–π—à–µ–µ"
        elif data.get("orderDate") and data.get("orderTime"):
            try:
                dt = datetime.strptime(data["orderDate"], "%Y-%m-%d")
                when_str = f"{dt.strftime('%d.%m')} –≤ {data['orderTime']}"
            except:
                when_str = f"{data['orderDate']} {data['orderTime']}"

        # –°–æ—Å—Ç–∞–≤
        lines = []
        order_items = []
        for name, info in items.items():
            qty   = info.get("qty", 0)
            price = info.get("price", 0)
            lines.append(f"- {name} √ó{qty} = {qty*price} ‡∏ø")
            order_items.append({"name": name, "qty": qty, "price": price})
        items_text = "\n".join(lines)

        # –ê–¥–º–∏–Ω
        admin_text = (
            "‚úÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
            f"‚Ä¢ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> {username}\n"
            f"‚Ä¢ <i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> {phone}\n"
            f"‚Ä¢ <i>–ê–¥—Ä–µ—Å:</i> {address}\n"
            f"‚Ä¢ <i>–î–æ—Å—Ç–∞–≤–∫–∞:</i> {delivery} ‡∏ø\n"
            f"‚Ä¢ <i>–û–ø–ª–∞—Ç–∞:</i> {pay_method}\n"
        )
        if when_str:
            admin_text += f"‚Ä¢ <i>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</i> {when_str}\n"
        admin_text += f"\nüçΩ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total} ‡∏ø"
        await bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode="HTML")
        logger.info("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")

        # –ö–ª–∏–µ–Ω—Ç
        client_text = (
            "üì¶ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"–ò–º—è: {username}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n"
            f"–û–ø–ª–∞—Ç–∞: {pay_method}\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery} ‡∏ø\n"
        )
        if when_str:
            client_text += f"–í—Ä–µ–º—è: {when_str}\n"
        client_text += f"\nüßæ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\nüí∞ –ò—Ç–æ–≥–æ: {total} ‡∏ø\n\n–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        await message.answer(client_text)

        # –ü–µ—á–∞—Ç—å
        payload = {
            "name":       username,
            "phone":      phone,
            "address":    address,
            "delivery":   delivery,
            "payment":    pay_method,
            "items":      order_items,
            "total":      total,
            "date":       datetime.now(ZoneInfo("Asia/Bangkok")).strftime("%Y-%m-%d %H:%M:%S"),
            "order_time": when_str
        }
        async with aiohttp.ClientSession() as sess:
            resp = await sess.post("https://9c7ad82f72b9.ngrok-free.app/order", json=payload)
            if resp.status == 200:
                logger.info("–ü–µ—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: HTTP {resp.status}")

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Smoke Factory BBQ ===")
    run_fake_server(8080)
    schedule_restart()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())

