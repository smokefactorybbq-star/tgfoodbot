import os
import sys
import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from datetime import datetime, timedelta
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

def run_fake_server(port=8080):
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
    server = HTTPServer(('', port), Handler)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = os.getenv("API_TOKEN") or "TOKEN_REMOVED"
ADMIN_CHAT_ID = 7309681026
RESTART_MINUTES = 120

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
run_fake_server(port=8080)
def schedule_restart():
    def _restart():
        python = sys.executable
        os.execv(python, [python] + sys.argv)
    import threading
    timer = threading.Timer(RESTART_MINUTES * 60, _restart)
    timer.daemon = True
    timer.start()

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    web_app_btn = types.KeyboardButton(
        text="üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é",
        web_app=types.WebAppInfo(url="https://v0-index-sepia.vercel.app")
    )
    keyboard.add(web_app_btn)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Smoke Factory BBQ!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.",
        reply_markup=keyboard
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def handle_order(message: types.Message):
    logger.info("===== –ü–û–õ–£–ß–ï–ù –ó–ê–ö–ê–ó –û–¢ WEB APP =====")
    logger.info(f"–°—ã—Ä–æ–π data –∏–∑ WebApp: {message.web_app_data.data}")

    try:
        data = json.loads(message.web_app_data.data)
        logger.info(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {data}")

        pay_method = data.get('payMethod', '–Ω–µ –≤—ã–±—Ä–∞–Ω')
        user = message.from_user
        username = f"@{user.username}" if user.username else (user.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
        phone = data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        address = data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        delivery = data.get('delivery', 0)
        total = data.get('total', 0)
        items = data.get('items', {})

        # === –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ===
        when_str = ""
        if data.get("orderWhen") == "soonest":
            try:
                order_date = data.get('orderDate')
                if order_date:
                    d = datetime.strptime(order_date, "%Y-%m-%d")
                    when_str = f"{d.strftime('%d.%m')}, –±–ª–∏–∂–∞–π—à–µ–µ"
                else:
                    d = datetime.now() + timedelta(hours=7)
                    when_str = f"{d.strftime('%d.%m')}, –±–ª–∏–∂–∞–π—à–µ–µ"
            except Exception:
                d = datetime.now() + timedelta(hours=7)
                when_str = f"{d.strftime('%d.%m')}, –±–ª–∏–∂–∞–π—à–µ–µ"
        elif data.get('orderDate') and data.get('orderTime'):
            try:
                d = datetime.strptime(data['orderDate'], "%Y-%m-%d")
                when_str = f"{d.strftime('%d.%m')} –≤ {data['orderTime']}"
            except Exception:
                when_str = f"{data['orderDate']} {data['orderTime']}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
        item_lines = []
        order_items = []
        for name, info in items.items():
            qty = info.get('qty', 0)
            price = info.get('price', 0)
            line_sum = qty * price
            item_lines.append(f"- {name} √ó{qty} = {line_sum} ‡∏ø")
            order_items.append({"name": name, "qty": qty, "price": price})

        items_text = "\n".join(item_lines)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        admin_text = (
            "‚úÖ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
            f"‚Ä¢ <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> {username}\n"
            f"‚Ä¢ <i>–¢–µ–ª–µ—Ñ–æ–Ω:</i> {phone}\n"
            f"‚Ä¢ <i>–ê–¥—Ä–µ—Å:</i> {address}\n"
            f"‚Ä¢ <i>–î–æ—Å—Ç–∞–≤–∫–∞:</i> {delivery} ‡∏ø\n"
            f"‚Ä¢ <i>–û–ø–ª–∞—Ç–∞:</i> {pay_method}\n"
        )
        if when_str:
            admin_text += f"‚Ä¢ <i>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</i> {when_str}\n"
        admin_text += (
            "\nüçΩ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n" +
            items_text +
            f"\n\nüí∞ <b>–ò—Ç–æ–≥–æ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π):</b> {total} ‡∏ø"
        )
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, parse_mode="HTML")
        logger.info("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_text = (
            "üì¶ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"–ò–º—è: {username}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–û–ø–ª–∞—Ç–∞: {pay_method}\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery} ‡∏ø\n"
        )
        if when_str:
            client_text += f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {when_str}\n"
        client_text += (
            f"\nüßæ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{items_text}\n\n"
            f"üí∞ –ò—Ç–æ–≥–æ: {total} ‡∏ø\n\n"
            "–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        )
        await bot.send_message(chat_id=message.chat.id, text=client_text)

        # === –í—Ä–µ–º—è –¥–ª—è –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¢–∞–∏–ª–∞–Ω–¥–∞ ===
        from zoneinfo import ZoneInfo
        dt_bkk = datetime.now(ZoneInfo("Asia/Bangkok"))
        order_payload = {
            "name": username,
            "phone": phone,
            "address": address,
            "delivery": delivery,
            "payment": pay_method,
            "items": order_items,
            "total": total,
            "date": dt_bkk.strftime("%Y-%m-%d %H:%M:%S"),
            "order_time": when_str  # –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –¥–ª—è —á–µ–∫–∞
        }
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.post("https://9c7ad82f72b9.ngrok-free.app/order", json=order_payload) as resp:
                    if resp.status == 200:
                        logger.info("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–µ–∫–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ —á–µ–∫–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É: HTTP {resp.status}")
        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–µ–∫–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")

async def on_startup(_):
    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Smoke Factory BBQ ===")
    schedule_restart()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
